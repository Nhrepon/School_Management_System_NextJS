// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Add your models here
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
} 

model Admin{
  id Int @id @default(autoincrement())
  userName String
  email String @unique
  password String
}

model Student{
  id String @id
  userName String @unique
  name String
  email String?   @unique
  mobile String?   @unique
  address String
  image String?
  bloodGroup String
  sex UserSex
  birthDate DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  parentId String
  parent Parent @relation(fields: [parentId], references: [id])
  classId Int
  class Class @relation(fields: [classId], references: [id])
  gradeId Int
  grade Grade @relation(fields: [gradeId], references: [id])
  attendances Attendance[]
  results Result[]
}
enum UserSex{
  Male
  Female
}

model Parent{
  id String @id
  userName String @unique
  name String
  email String?   @unique
  mobile String   @unique
  address String
  image String?
  bloodGroup String
  sex UserSex
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  students Student[]
}

model Teacher{
  id String @id
  userName String @unique
  name String
  email String?   @unique
  mobile String?   @unique
  address String
  image String?
  bloodGroup String
  sex UserSex
  birthDay DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  subjects Subject[]
  lessons Lesson[]
  classes Class[]
}

model Grade{
  id Int @id @default(autoincrement())
  level Int @unique
  students Student[]
  classes Class[]
}

model Class{
  id Int @id @default(autoincrement())
  name String @unique
  capacity Int
  lessons Lesson[]
  supervisorId String?
  supervisor Teacher? @relation(fields: [supervisorId], references: [id])
  students Student[]
  gradeId Int?
  grade Grade? @relation(fields: [gradeId], references: [id])
  events Event[]
  announcements Announcement[]

}

model Subject{
  id Int @id @default(autoincrement())
  name String @unique
  teachers Teacher[]
  lessons Lesson[]
}

model Lesson{
  id Int @id @default(autoincrement())
  name String
  day Day
  startTime DateTime
  endTime DateTime
  subjectId Int
  subject Subject @relation(fields: [subjectId], references: [id])
  classId Int
  class Class @relation(fields: [classId], references: [id])
  teacherId String
  teacher Teacher @relation(fields: [teacherId], references: [id])
  exams Exam[]
  assignments Assignment[]
  attendances Attendance[]
}
enum Day{
  Saturday
  Sunday
  Monday
  Tuesday
  Wednesday
  Thursday
}
model Exam{
  id Int @id @default(autoincrement())
  title String
  startTime DateTime
  endTime DateTime
  lessonId Int
  lesson Lesson @relation(fields: [lessonId], references: [id])
  results Result[]
}

model Assignment{
  id Int @id @default(autoincrement())
  title String
  startDate DateTime
  dueDate DateTime
  lessonId Int
  lesson Lesson @relation(fields: [lessonId], references: [id])
  results Result[]
}

model Result{
  id Int @id @default(autoincrement())
  score Int
  examId Int?
  exam Exam? @relation(fields: [examId], references: [id])
  assignmentId Int?
  assignment Assignment? @relation(fields: [assignmentId], references: [id])
  studentId String
  student Student @relation(fields: [studentId], references: [id])
}

model Attendance{
  id Int @id @default(autoincrement())
  date DateTime
  present Boolean
  studentId String
  student Student @relation(fields: [studentId], references: [id])
  lessonId Int
  lesson Lesson @relation(fields: [lessonId], references: [id])
}

model Event{
  id Int @id @default(autoincrement())
  title String
  description String
  startDate DateTime
  endDate DateTime
  classId Int?
  class Class? @relation(fields: [classId], references: [id])
}

model Announcement{
  id Int @id @default(autoincrement()) 
  title String
  description String
  date DateTime
  classId Int?
  class Class? @relation(fields: [classId], references: [id])   
}

